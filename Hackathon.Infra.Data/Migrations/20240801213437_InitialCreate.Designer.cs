// <auto-generated />
using System;
using Hackathon.Infra.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Hackathon.Infra.Data.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20240801213437_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Hackathon.Domain.Entities.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId", "AppointmentDate")
                        .HasDatabaseName("IX_Appointments_DoctorId_AppointmentDate");

                    b.HasIndex("PatientId", "AppointmentDate")
                        .HasDatabaseName("IX_Appointments_PatientId_AppointmentDate");

                    b.ToTable("Appointment", (string)null);
                });

            modelBuilder.Entity("Hackathon.Domain.Entities.DefaultAvailability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("EndFriday")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("EndMonday")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("EndSaturday")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("EndSunday")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("EndThursday")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("EndTuesday")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("EndWednesday")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("LunchEndFriday")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("LunchEndMonday")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("LunchEndSaturday")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("LunchEndSunday")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("LunchEndThursday")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("LunchEndTuesday")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("LunchEndWednesday")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("LunchStartFriday")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("LunchStartMonday")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("LunchStartSaturday")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("LunchStartSunday")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("LunchStartThursday")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("LunchStartTuesday")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("LunchStartWednesday")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("StartFriday")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("StartMonday")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("StartSaturday")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("StartSunday")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("StartThursday")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("StartTuesday")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("StartWednesday")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId")
                        .IsUnique()
                        .HasDatabaseName("IX_DefaultAvailabilities_DoctorId");

                    b.ToTable("DefaultAvailability", (string)null);
                });

            modelBuilder.Entity("Hackathon.Domain.Entities.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CRM")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("Specialty")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("Doctor", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CRM = "123456",
                            PersonId = 1,
                            Specialty = "Clinico Geral"
                        });
                });

            modelBuilder.Entity("Hackathon.Domain.Entities.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("HealthInsuranceNumber")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("Patient", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            HealthInsuranceNumber = "Unimed",
                            PersonId = 2
                        });
                });

            modelBuilder.Entity("Hackathon.Domain.Entities.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Person", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CPF = "12345678",
                            Name = "Doctor X",
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            CPF = "134567890",
                            Name = "Patient Y",
                            Status = 1
                        });
                });

            modelBuilder.Entity("Hackathon.Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AlterDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AlterDate = new DateTime(2024, 8, 1, 18, 34, 36, 760, DateTimeKind.Local).AddTicks(4720),
                            CreateDate = new DateTime(2024, 8, 1, 18, 34, 36, 760, DateTimeKind.Local).AddTicks(4710),
                            Description = "Doctor"
                        },
                        new
                        {
                            Id = 2,
                            AlterDate = new DateTime(2024, 8, 1, 18, 34, 36, 760, DateTimeKind.Local).AddTicks(4722),
                            CreateDate = new DateTime(2024, 8, 1, 18, 34, 36, 760, DateTimeKind.Local).AddTicks(4721),
                            Description = "Patient"
                        });
                });

            modelBuilder.Entity("Hackathon.Domain.Entities.RoleAccess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Route")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleAccess", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoleId = 1,
                            Route = "Auth/RefreshToken"
                        },
                        new
                        {
                            Id = 2,
                            RoleId = 1,
                            Route = "Role"
                        },
                        new
                        {
                            Id = 3,
                            RoleId = 1,
                            Route = "User"
                        },
                        new
                        {
                            Id = 4,
                            RoleId = 1,
                            Route = "UserRole"
                        },
                        new
                        {
                            Id = 5,
                            RoleId = 2,
                            Route = "Auth/RefreshToken"
                        });
                });

            modelBuilder.Entity("Hackathon.Domain.Entities.SpecificAvailability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("EndTime")
                        .IsRequired()
                        .HasColumnType("time");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<TimeSpan?>("StartTime")
                        .IsRequired()
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("SpecificAvailability", (string)null);
                });

            modelBuilder.Entity("Hackathon.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiryDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("User", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "ricardomacieldasilva@hotmail.com",
                            PasswordHash = "$2a$11$KOwm29NkNPAS0HvnzEjzHedAXw0lHZco6WcGeIBXMXVURMCV8CZlm",
                            PersonId = 1
                        },
                        new
                        {
                            Id = 2,
                            Email = "patienty@hotmail.com",
                            PasswordHash = "$2a$11$rfCt43FZO0aE5g74YwEKJ.krw1zZSfHlZAeCC13SlnIHD43gh9gxu",
                            PersonId = 2
                        });
                });

            modelBuilder.Entity("Hackathon.Domain.Entities.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRole", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoleId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            RoleId = 2,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("Hackathon.Domain.Entities.Appointment", b =>
                {
                    b.HasOne("Hackathon.Domain.Entities.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Hackathon.Domain.Entities.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Hackathon.Domain.Entities.DefaultAvailability", b =>
                {
                    b.HasOne("Hackathon.Domain.Entities.Doctor", "Doctor")
                        .WithOne()
                        .HasForeignKey("Hackathon.Domain.Entities.DefaultAvailability", "DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Hackathon.Domain.Entities.Doctor", b =>
                {
                    b.HasOne("Hackathon.Domain.Entities.Person", "Person")
                        .WithOne()
                        .HasForeignKey("Hackathon.Domain.Entities.Doctor", "PersonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Hackathon.Domain.Entities.Patient", b =>
                {
                    b.HasOne("Hackathon.Domain.Entities.Person", "Person")
                        .WithOne()
                        .HasForeignKey("Hackathon.Domain.Entities.Patient", "PersonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Hackathon.Domain.Entities.RoleAccess", b =>
                {
                    b.HasOne("Hackathon.Domain.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Hackathon.Domain.Entities.SpecificAvailability", b =>
                {
                    b.HasOne("Hackathon.Domain.Entities.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Hackathon.Domain.Entities.User", b =>
                {
                    b.HasOne("Hackathon.Domain.Entities.Person", "Person")
                        .WithOne()
                        .HasForeignKey("Hackathon.Domain.Entities.User", "PersonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Hackathon.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("Hackathon.Domain.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Hackathon.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Hackathon.Domain.Entities.Doctor", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("Hackathon.Domain.Entities.Patient", b =>
                {
                    b.Navigation("Appointments");
                });
#pragma warning restore 612, 618
        }
    }
}
